#ifndef BB_GRAPHICS_COMMANDS_H
#define BB_GRAPHICS_COMMANDS_H

#include <bb/blitz/module.h>
#include <bb/graphics/graphics.h>

#ifdef __cplusplus
extern "C" {
#endif

// AUTOGENERATED. DO NOT EDIT.
// RUN `make` TO UPDATE.

//gfx driver info
bb_int_t BBCALL bbCountGfxDrivers(  );
BBStr * BBCALL bbGfxDriverName( bb_int_t driver );
void BBCALL bbSetGfxDriver( bb_int_t driver );

//gfx mode info
bb_int_t BBCALL bbCountGfxModes(  );
bb_int_t BBCALL bbGfxModeExists( bb_int_t width,bb_int_t height,bb_int_t depth );
bb_int_t BBCALL bbGfxModeWidth( bb_int_t mode );
bb_int_t BBCALL bbGfxModeHeight( bb_int_t mode );
bb_int_t BBCALL bbGfxModeDepth( bb_int_t mode );
bb_int_t BBCALL bbAvailVidMem(  );
bb_int_t BBCALL bbTotalVidMem(  );
bb_int_t BBCALL bbGfxDriver3D( bb_int_t driver );
bb_int_t BBCALL bbCountGfxModes3D(  );
bb_int_t BBCALL bbGfxMode3DExists( bb_int_t width,bb_int_t height,bb_int_t depth );
bb_int_t BBCALL bbGfxMode3D( bb_int_t mode );
bb_int_t BBCALL bbWindowed3D(  );

//display mode
void BBCALL bbGraphics( bb_int_t width,bb_int_t height,bb_int_t depth,bb_int_t mode );
void BBCALL bbGraphics3D( bb_int_t width,bb_int_t height,bb_int_t depth,bb_int_t mode );
void BBCALL bbEndGraphics(  );
bb_int_t BBCALL bbGraphicsLost(  );
bb_int_t BBCALL bbGraphicsOpen(  );
void BBCALL bbSetGamma( bb_int_t src_red,bb_int_t src_green,bb_int_t src_blue,bb_float_t dest_red,bb_float_t dest_green,bb_float_t dest_blue );
void BBCALL bbUpdateGamma( bb_int_t calibrate );
bb_float_t BBCALL bbGammaRed( bb_int_t red );
bb_float_t BBCALL bbGammaGreen( bb_int_t green );
bb_float_t BBCALL bbGammaBlue( bb_int_t blue );
BBCanvas * BBCALL bbFrontBuffer(  );
BBCanvas * BBCALL bbBackBuffer(  );
bb_int_t BBCALL bbScanLine(  );
void BBCALL bbVWait( bb_int_t frames );
void BBCALL bbFlip( bb_int_t vwait );
bb_int_t BBCALL bbGraphicsWidth(  );
bb_int_t BBCALL bbGraphicsHeight(  );
bb_int_t BBCALL bbGraphicsDepth(  );

//buffer management
void BBCALL bbSetBuffer( BBCanvas *buffer );
BBCanvas * BBCALL bbGraphicsBuffer(  );
bb_int_t BBCALL bbLoadBuffer( BBCanvas *buffer,BBStr *bmpfile );
bb_int_t BBCALL bbSaveBuffer( BBCanvas *buffer,BBStr *bmpfile );
void BBCALL bbBufferDirty( BBCanvas *buffer );

//fast pixel reads/write
void BBCALL bbLockBuffer( BBCanvas *buffer );
void BBCALL bbUnlockBuffer( BBCanvas *buffer );
bb_int_t BBCALL bbReadPixel( bb_int_t x,bb_int_t y,BBCanvas *buffer );
void BBCALL bbWritePixel( bb_int_t x,bb_int_t y,bb_int_t argb,BBCanvas *buffer );
bb_int_t BBCALL bbReadPixelFast( bb_int_t x,bb_int_t y,BBCanvas *buffer );
void BBCALL bbWritePixelFast( bb_int_t x,bb_int_t y,bb_int_t argb,BBCanvas *buffer );
void BBCALL bbCopyPixel( bb_int_t src_x,bb_int_t src_y,BBCanvas *src_buffer,bb_int_t dest_x,bb_int_t dest_y,BBCanvas *dest_buffer );
void BBCALL bbCopyPixelFast( bb_int_t src_x,bb_int_t src_y,BBCanvas *src_buffer,bb_int_t dest_x,bb_int_t dest_y,BBCanvas *dest_buffer );
void BBCALL bbCopyRect( bb_int_t source_x,bb_int_t source_y,bb_int_t width,bb_int_t height,bb_int_t dest_x,bb_int_t dest_y,BBCanvas *src_buffer,BBCanvas *dest_buffer );

#ifdef __cplusplus
}
#endif


#endif
