include_directories (SYSTEM .)

# some useful macros...
macro(bb_start_module name)
  set(MODULE_ID ${name})
  set(DEPENDS_ON )
  set(SOURCES )
  set(LIBS )
  set(SYSTEM_LIBS )
  set(EXTRA_FILES )
  set(FUNCTIONS )
endmacro()

macro(bb_end_module)
  add_library (bb.${MODULE_ID} STATIC ${SOURCES})
  target_link_libraries (bb.${MODULE_ID} ${DEPENDS_ON} ${LIBS} ${SYSTEM_LIBS})
  target_output_to_toolchain(bb.${MODULE_ID})

  if(BB_COVERAGE)
    set_target_properties(bb.${MODULE_ID} PROPERTIES COMPILE_FLAGS ${BB_COVERAGE})
  endif()

  set(MODULE_IFACE )
  list(APPEND MODULE_IFACE "[module.\"${MODULE_ID}\"]")
  if(NOT "${DEPENDS_ON}" STREQUAL "")
    list(JOIN DEPENDS_ON "\", \"" depends_on)
    list(APPEND MODULE_IFACE "depends_on = [\"${depends_on}\"]")
  endif()
  if(NOT "${LIBS}" STREQUAL "")
    list(JOIN LIBS "\", \"" libs)
    list(APPEND MODULE_IFACE "libs = [\"${libs}\"]")
  endif()
  if(NOT "${SYSTEM_LIBS}" STREQUAL "")
    list(JOIN SYSTEM_LIBS "\", \"" system_libs)
    list(APPEND MODULE_IFACE "system_libs = [\"${system_libs}\"]")
  endif()
  if(NOT "${EXTRA_FILES}" STREQUAL "")
    list(JOIN EXTRA_FILES "\", \"" extra_files)
    list(APPEND MODULE_IFACE "extra_files = [\"${extra_files}\"]")
  endif()

  if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/commands.decls")
    file(READ "${CMAKE_CURRENT_LIST_DIR}/commands.decls" COMMANDS)
    string(REPLACE ";" "--" COMMANDS "${COMMANDS}")
    string(REPLACE "\n" ";" COMMANDS "${COMMANDS}")

    macro(link str)
      set(LINK_SRC "${LINK_SRC}${str}\n")
    endmacro()

    macro(head str)
      set(HEADER_SRC "${HEADER_SRC}${str}\n")
    endmacro()

    string(REPLACE "-" "_" MODULE_IDENT ${MODULE_ID})
    string(REPLACE "." "_" MODULE_IDENT ${MODULE_IDENT})
    string(TOUPPER "BB_${MODULE_IDENT}_COMMANDS_H" HEADER_DEF)

    head("#ifndef ${HEADER_DEF}")
    head("#define ${HEADER_DEF}\n")

    head("#include <bb/blitz/module.h>")
    head("#include <bb/${MODULE_ID}/${MODULE_ID}.h>")
    head("")
    head("#ifdef __cplusplus")
    head("extern \"C\" {")
    head("#endif")
    head("")
    head("// AUTOGENERATED. DO NOT EDIT.")
    head("// RUN `make` TO UPDATE.")

    link("// AUTOGENERATED. DO NOT EDIT.")
    link("// RUN `make` TO UPDATE.")
    link("")
    link("#include <bb/blitz/module.h>")
    link("#include <bb/${MODULE_ID}/${MODULE_ID}.h>")
    link("")
    link("BBMODULE_LINK( ${MODULE_IDENT} ){")

    set(REGEXP_IDENT "([a-zA-Z_][_a-zA-Z_0-9]*)")
    set(REGEXP_TYPE "[#%$]|\.([a-zA-Z_][a-zA-Z_0-9]*)")

    set(REGEXP_COM "^(${REGEXP_IDENT})(${REGEXP_TYPE})?\\((.*)\\):\"(${REGEXP_IDENT})\"$")
    set(REGEXP_SYM "^(${REGEXP_IDENT}):\"(&?${REGEXP_IDENT})\"$")

    set(COMMAND_IDENTS "")

    foreach(DECL IN LISTS COMMANDS)
      string(STRIP "${DECL}" DECL)

      if("${DECL}" MATCHES "^--")
        string(REGEX REPLACE "^--" "" COMMENT "${DECL}")
        head("\n//${COMMENT}")
      elseif("${DECL}" STREQUAL "")
        # don't care...
      elseif("${DECL}" MATCHES "${REGEXP_SYM}")
        string(REPLACE "\"" "\\\"" decl "${DECL}")
        list(APPEND FUNCTIONS "${decl}")

        set(IDENT  ${CMAKE_MATCH_1})
        set(SYMBOL ${CMAKE_MATCH_3})
        link("\trtSym( \"${IDENT}\",\"${SYMBOL}\",${SYMBOL} );")
      elseif("${DECL}" MATCHES "${REGEXP_COM}")
        set(IDENT  ${CMAKE_MATCH_1})
        if(NOT ${CMAKE_MATCH_4} STREQUAL "")
          set(RET ${CMAKE_MATCH_4})
        else()
          set(RET ${CMAKE_MATCH_3})
        endif()
        set(PARAMS ${CMAKE_MATCH_5})
        set(SYMBOL ${CMAKE_MATCH_6})

        string(STRIP "${PARAMS}" PARAMS)
        string(REPLACE "," ";" PARAMS "${PARAMS}")

        list(APPEND COMMAND_SYMBOLS ${SYMBOL})

        if("${RET}" STREQUAL "")
          set(CTYPE "void")
          set(BBTYPE "")
        elseif("${RET}" STREQUAL "%")
          set(CTYPE "bb_int_t")
          set(BBTYPE "%")
        elseif("${RET}" STREQUAL "#")
          set(CTYPE "bb_float_t")
          set(BBTYPE "#")
        elseif("${RET}" STREQUAL "$")
          set(CTYPE "BBStr *")
          set(BBTYPE "$")
        else()
          set(CTYPE "${RET} *")
          set(BBTYPE "%")
        endif()

        set(RTSYM "${BBTYPE}${IDENT}")

        set(ARGS_LIST "")
        foreach(PARAM IN LISTS PARAMS)
          set(REGEXP_ARG "(${REGEXP_IDENT})(${REGEXP_TYPE})(=(.*))?")


          if(NOT "${PARAM}" MATCHES ${REGEXP_ARG})
            message(FATAL_ERROR "Cannot parse ${PARAM} for ${DECL}")
          endif()

          set(PARAM_IDENT ${CMAKE_MATCH_1})
          if(NOT ${CMAKE_MATCH_4} STREQUAL "")
            set(PARAM_RET ${CMAKE_MATCH_4})
          else()
            set(PARAM_RET ${CMAKE_MATCH_3})
          endif()
          set(PARAM_DEF   ${CMAKE_MATCH_5})

          if("${PARAM_IDENT}" STREQUAL "float" OR "${PARAM_IDENT}" STREQUAL "int" OR "${PARAM_IDENT}" STREQUAL "short")
            set(PARAM_IDENT "${PARAM_IDENT}_")
          endif()

          set(PARAM_CTYPE "")
          set(PARAM_BBTYPE ${PARAM_RET})
          if("${PARAM_RET}" STREQUAL "%")
            set(PARAM_CTYPE "bb_int_t ")
          elseif("${PARAM_RET}" STREQUAL "#")
            set(PARAM_CTYPE "bb_float_t ")
          elseif("${PARAM_RET}" STREQUAL "$")
            set(PARAM_CTYPE "BBStr *")
          else()
            set(PARAM_CTYPE "${PARAM_RET} *")
            set(PARAM_BBTYPE "%")
          endif()

          string(REPLACE "\"" "\\\\\"" PARAM_DEF "${PARAM_DEF}")

          list(APPEND ARGS_LIST "${PARAM_CTYPE}${PARAM_IDENT}")

          set(RTSYM "${RTSYM}${PARAM_BBTYPE}${PARAM_IDENT}${PARAM_DEF}")
        endforeach()

        list(JOIN ARGS_LIST "," ARGS_STR)

        link("\trtSym( \"${RTSYM}\",\"${SYMBOL}\",${SYMBOL} );")

        set(toml "${RTSYM}:${SYMBOL}")
        string(REPLACE "\\\\\"" "\\\"" toml "${toml}")
        list(APPEND FUNCTIONS ${toml})

        head("${CTYPE} BBCALL ${SYMBOL}( ${ARGS_STR} );")
      else()
        message(FATAL_ERROR "Cannot parse \"${DECL}\"")
      endif()
    endforeach()

    head("")
    head("#ifdef __cplusplus")
    head("}")
    head("#endif")
    head("")
    head("\n#endif")

    link("}")

    file_write_changes(${CMAKE_CURRENT_LIST_DIR}/module.link.cpp "${LINK_SRC}")
    file_write_changes(${CMAKE_CURRENT_LIST_DIR}/commands.h "${HEADER_SRC}")
  endif()

  if(NOT "${FUNCTIONS}" STREQUAL "")
    list(JOIN FUNCTIONS "\",\n  \"" symbols)
    list(APPEND MODULE_IFACE "symbols = [\n  \"${symbols}\"\n]")
  endif()

  list(JOIN MODULE_IFACE "\n" MODULE_IFACE)
  set(MODULE_IFACE "${MODULE_IFACE}" PARENT_SCOPE)
endmacro()

# add all modules in bb/
file(GLOB modules RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} bb/*)
foreach(module ${modules})
  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${module}/CMakeLists.txt)
    set(MODULE_IFACE )
    add_subdirectory(${module})

    if(MODULE_IFACE)
      set(IFACE_CACHE "${IFACE_CACHE}\n${MODULE_IFACE}\n")
      set(MODULES_IFACE ${IFACE_CACHE} PARENT_SCOPE)
    endif()
  endif()
endforeach()
