include_directories (SYSTEM .)

# some useful macros...
macro(bb_start_module name)
  set(MODULE_ID ${name})
  set(DEPENDS_ON )
  set(SOURCES )
  set(LIBS )
endmacro()

macro(bb_end_module)
  add_library (bb.${MODULE_ID} STATIC ${SOURCES})
  target_link_libraries (bb.${MODULE_ID} ${DEPENDS_ON} ${LIBS})

  if(BB_COVERAGE)
    set_target_properties(bb.${MODULE_ID} PROPERTIES COMPILE_FLAGS ${BB_COVERAGE})
  endif()

  file(WRITE  ${BUILD_PATH}/cfg/${MODULE_ID}.${BB_ENV}.i "ID: bb.${MODULE_ID}\n")
  file(APPEND ${BUILD_PATH}/cfg/${MODULE_ID}.${BB_ENV}.i "MODULES: ${DEPENDS_ON}\n")
  file(APPEND ${BUILD_PATH}/cfg/${MODULE_ID}.${BB_ENV}.i "LIBS: ${LIBS}\n")

  if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/commands.decls")
    file(READ "${CMAKE_CURRENT_LIST_DIR}/commands.decls" COMMANDS)
    string(REPLACE ";" "--" COMMANDS "${COMMANDS}")
    string(REPLACE "\n" ";" COMMANDS "${COMMANDS}")

    macro(link str)
      set(LINK_SRC "${LINK_SRC}${str}\n")
    endmacro()

    macro(head str)
      set(HEADER_SRC "${HEADER_SRC}${str}\n")
    endmacro()

    string(TOUPPER "BB_${MODULE_ID}_COMMANDS_H" HEADER_DEF)

    head("#ifndef ${HEADER_DEF}")
    head("#define ${HEADER_DEF}\n")

    head("#include <bb/blitz/module.h>")
    head("#include \"../config.h\"")
    head("")
    head("#ifdef __cplusplus")
    head("extern \"C\" {")
    head("#endif")
    head("")
    head("// AUTOGENERATED. DO NOT EDIT.")
    head("// RUN `make` TO UPDATE.")

    link("// AUTOGENERATED. DO NOT EDIT.")
    link("// RUN `make` TO UPDATE.")
    link("")
    link("#include <bb/blitz/module.h>")
    link("#include <bb/${MODULE_ID}/${MODULE_ID}.h>")
    link("")
    link("#ifdef WIN32")
    link("BBMODULE_LINK( ${MODULE_ID} ){")

    set(REGEXP_IDENT "[a-zA-Z_]+[a-zA-Z_0-9]*")
    set(REGEXP_TYPE "[#%$]")
    set(REGEXP "^(${REGEXP_IDENT}${REGEXP_TYPE}?)\\((.*)\\):\"(${REGEXP_IDENT})\"")

    foreach(DECL IN LISTS COMMANDS)
      string(STRIP "${DECL}" DECL)

      if("${DECL}" MATCHES "^--")
        string(REGEX REPLACE "^--" "" COMMENT "${DECL}")
        head("\n//${COMMENT}")
      elseif(NOT ${DECL} STREQUAL "")
        string(REGEX REPLACE ${REGEXP} "\\1" IDENT  ${DECL})
        string(REGEX REPLACE ${REGEXP} "\\2" PARAMS ${DECL})
        string(REGEX REPLACE ${REGEXP} "\\3" SYMBOL ${DECL})

        string(REGEX REPLACE "(${REGEXP_IDENT})(.*)" "\\2" RET ${IDENT})
        string(REGEX REPLACE "(${REGEXP_IDENT})(.*)" "\\1" IDENT ${IDENT})

        string(STRIP "${PARAMS}" PARAMS)
        string(REPLACE "," ";" PARAMS "${PARAMS}")

        set(RTSYM "${RET}${IDENT}")

        set(CTYPE "void")
        if("${RET}" STREQUAL "%")
          set(CTYPE "bb_int_t")
        elseif("${RET}" STREQUAL "#")
          set(CTYPE "bb_float_t")
        elseif("${RET}" STREQUAL "$")
          set(CTYPE "BBStr *")
        endif()

        set(ARGS_LIST "")
        foreach(PARAM IN LISTS PARAMS)
          string(REGEX REPLACE "(.*)(${REGEXP_TYPE})(.*)" "\\1"    PARAM_IDENT ${PARAM})
          string(REGEX REPLACE "(.*)(${REGEXP_TYPE})(.*)" "\\2"    PARAM_RET   ${PARAM})
          string(REGEX REPLACE "(.*)(${REGEXP_TYPE})(.*)" "\\1\\3" PARAM_IDENT_DEF ${PARAM})

          set(PARAM_TYPE "")
          if("${PARAM_RET}" STREQUAL "%")
            set(PARAM_TYPE "bb_int_t ")
          elseif("${PARAM_RET}" STREQUAL "#")
            set(PARAM_TYPE "bb_float_t ")
          elseif("${PARAM_RET}" STREQUAL "$")
            set(PARAM_TYPE "BBStr *")
          endif()

          list(APPEND ARGS_LIST "${PARAM_TYPE}${PARAM_IDENT}")

          set(RTSYM "${RTSYM}${PARAM_RET}${PARAM_IDENT_DEF}")
        endforeach()

        list(JOIN ARGS_LIST "," ARGS_STR)

        link("\trtSym( \"${RTSYM}\",${SYMBOL} )\;")

        head("${CTYPE} BBCALL ${SYMBOL}( ${ARGS_STR} )\;")
      endif()
    endforeach()

    head("")
    head("#ifdef __cplusplus")
    head("}")
    head("#endif")
    head("")
    head("\n#endif")

    link("}")
    link("#endif")

    file(WRITE ${CMAKE_CURRENT_LIST_DIR}/module.link.cpp ${LINK_SRC})
    file(WRITE ${CMAKE_CURRENT_LIST_DIR}/commands.h ${HEADER_SRC})
  endif()
endmacro()

# add all modules in bb/
file(GLOB modules RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} bb/*)
foreach(module ${modules})
  # if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${module}/CMakeLists.txt)
    add_subdirectory(${module})
  # ENDIF()
endforeach()
