set(CMAKE_SHARED_LIBRARY_PREFIX )

# some useful macros...
macro(bb_start_runtime id entry)
  set(RT_ID ${id})
  set(RT_ENTRY ${entry})
  set(LIBS )
  set(DEPENDS_ON )
endmacro()

macro(bb_addmodule name)
  if(TARGET bb.${name})
    set(LIBS ${LIBS} bb.${name})
    list(APPEND DEPENDS_ON ${name})
  endif()
endmacro()

macro(bb_end_runtime )
  if(NOT DEPENDS_ON)
    return()
  endif()

  set(id ${RT_ID})
  set(entry ${RT_ENTRY})

  set(name runtime.${id})

  set(MOD_IDS )
  foreach(dep IN LISTS DEPENDS_ON)
    string(REPLACE "-" "_" ident ${dep})
    string(REPLACE "." "_" ident ${ident})

    list(APPEND MOD_IDS ${ident})
  endforeach()

  set(MODS_TO_LINK)
  foreach(dep IN LISTS DEPENDS_ON)
    set(rel_path ../../modules/bb/${dep}/commands.decls)
    file(REAL_PATH ${rel_path} decls)

    if(EXISTS ${decls})
      string(REPLACE "-" "_" ident ${dep})
      string(REPLACE "." "_" ident ${ident})

      list(APPEND MODS_TO_LINK ${ident})
    endif()
  endforeach()

  set(STUB_SRC "")
  macro(stub str)
    set(STUB_SRC "${STUB_SRC}${str}\n")
  endmacro()

  function(file_write_changes path src)
    set(changed true)
    if(EXISTS ${path})
      file(READ ${path} prev_src)
      if("${src}" STREQUAL "${prev_src}")
        set(changed false)
      endif()
    endif()

    if(changed)
      file(WRITE ${path} "${src}")
    endif()
  endfunction()

  string(TOLOWER ${BB_PLATFORM} platform)

  stub("// AUTOGENERATED. DO NOT EDIT OR COMMIT.")
  stub("// RUN `make` TO UPDATE.")
  stub("")
  stub("#include <bb/stub/stub.h>")
  stub("#include \"../stdutil/stdutil.h\"")
  stub("")
  foreach(dep IN LISTS MOD_IDS)
    stub("BBMODULE_DECL( ${dep} );")
  endforeach()
  stub("")
  stub("class BBRuntime;")
  stub("BBRuntime *${entry}();")
  stub("BBRuntime *bbCreateRuntime(){")
  stub("\treturn ${entry}();")
  stub("}")
  stub("")
  stub("void bbruntime_link( void (*link)( const char *sym,void *pc ) ){")
  foreach(dep IN LISTS MODS_TO_LINK)
    stub("\t${dep}_link( link );")
  endforeach()
  stub("}")
  stub("")
  stub("bool bbruntime_create(){")
  foreach(dep IN LISTS MOD_IDS)
    stub("\tif( ${dep}_create() ){")
  endforeach()
  stub("\t\treturn true;")
  list(REVERSE MOD_IDS)
  foreach(dep IN LISTS MOD_IDS)
  stub("\t}else sue( \"${dep}_create failed\" );")
  stub("\t${dep}_destroy();")
  endforeach()
  stub("#ifndef BB_WINDOWS")
  stub("\t// TODO: get rid of this dirty bbStart hack that's needed to keep clang from stripping...")
  stub("\tbbStart( 0,0,0 ); // HACK")
  stub("#endif")
  stub("\treturn false;")
  stub("}")
  stub("")
  stub("bool bbruntime_destroy(){")
  foreach(dep IN LISTS MOD_IDS)
    stub("\t${dep}_destroy();")
  endforeach()
  stub("\treturn true;")
  stub("}")
  stub("")

  set(RT_CPP ${CMAKE_CURRENT_LIST_DIR}/rt.${platform}.cpp)
  file_write_changes(${RT_CPP} "${STUB_SRC}")

  # static
  foreach(dep IN LISTS DEPENDS_ON)
    set(link_cpp ${PROJECT_SOURCE_DIR}/src/modules/bb/${dep}/module.link.cpp)

    if(EXISTS ${link_cpp})
      set(SOURCES ${SOURCES} ${link_cpp})
    endif()
  endforeach()

  add_library(${name}.static STATIC ${RT_CPP} ${SOURCES})
  target_output_to_toolchain(${name}.static /lib)
  target_link_libraries(${name}.static PUBLIC ${LIBS} bb.stub)
  target_link_libraries(${name}.static ${SYSTEM_LIBS})
  target_include_directories(${name}.static PUBLIC ../../modules)

  set(IFACE ${TOOLCHAIN_PATH}/${name}.i)
  file(WRITE  ${IFACE} "ID: ${id}\n")
  file(APPEND ${IFACE} "DEPS: ${DEPENDS_ON}\n")

  if(BB_COVERAGE)
    set_property(TARGET ${name}.static APPEND_STRING PROPERTY COMPILE_FLAGS " ${BB_COVERAGE}")
  endif()

  # shared
  add_library(${name}.shared SHARED)
  target_link_libraries(${name}.shared bbruntime_dll ${name}.static)
  set_target_properties(${name}.shared PROPERTIES OUTPUT_NAME "runtime.${id}")

  if(BB_WINDOWS)
    target_output_to_bin(${name}.shared)

    if(BB64)
      set_target_properties(${name}.shared PROPERTIES OUTPUT_NAME "runtime64.${id}")
    endif()

    if(BB_MSVC)
      if(BB_WIN32)
        set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " /include:_runtimeGetRuntime")
      else()
        set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " /include:runtimeGetRuntime")
      endif()
      if(NOT BB_DEBUG)
        set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " /subsystem:windows")
      endif()
    else()
      # TODO: figure this out...
      set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " -static")
    endif()
  else()
    target_output_to_toolchain(${name}.shared)
  endif()

  if(BB_COVERAGE)
    set_property(TARGET ${name}.shared APPEND_STRING PROPERTY COMPILE_FLAGS " ${BB_COVERAGE}")
    set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " ${BB_COVERAGE}")
  endif()
endmacro()

# bring in all the runtimes
file(GLOB runtimes RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *)
foreach(runtime ${runtimes})
  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${runtime}/CMakeLists.txt)
    add_subdirectory(${runtime})
  ENDIF()
endforeach()
