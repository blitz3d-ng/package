set(CMAKE_SHARED_LIBRARY_PREFIX )

# some useful macros...
macro(bb_start_runtime id name entry)
  set(RT_ID ${id})
  set(RT_NAME ${name})
  set(RT_ENTRY ${entry})
  set(LIBS )
  set(DEPENDS_ON )
endmacro()

macro(bb_addmodule name)
  if(TARGET bb.${name})
    list (FIND DEPENDS_ON ${name} i)
    if (${i} EQUAL -1)
      get_target_property(OUT bb.${name} LINK_LIBRARIES)
      foreach(dep IN LISTS OUT)
        if("${dep}" MATCHES "bb.*")
          string(SUBSTRING ${dep} 3 -1 depname)
          bb_addmodule(${depname})
        endif()
      endforeach()

      set(LIBS ${LIBS} bb.${name})
      list(APPEND DEPENDS_ON ${name})
    endif()
  endif()
endmacro()

macro(bb_end_runtime )
  if(NOT DEPENDS_ON)
    return()
  endif()

  if(BB_LINUX OR BB_ANDROID)
    set(START_GROUP "-Wl,--start-group")
    set(END_GROUP "-Wl,--end-group")
  endif()

  set(id ${RT_ID})
  set(entry ${RT_ENTRY})

  set(name runtime.${id})

  set(MOD_IDS )
  foreach(dep IN LISTS DEPENDS_ON)
    string(REPLACE "-" "_" ident ${dep})
    string(REPLACE "." "_" ident ${ident})

    list(APPEND MOD_IDS ${ident})
  endforeach()

  set(MODS_TO_LINK)
  foreach(dep IN LISTS DEPENDS_ON)
    set(rel_path ../../modules/bb/${dep}/commands.decls)
    file(REAL_PATH ${rel_path} decls)

    if(EXISTS ${decls})
      string(REPLACE "-" "_" ident ${dep})
      string(REPLACE "." "_" ident ${ident})

      list(APPEND MODS_TO_LINK ${ident})
    endif()
  endforeach()

  set(STUB_SRC "")
  macro(stub str)
    set(STUB_SRC "${STUB_SRC}${str}\n")
  endmacro()

  function(file_write_changes path src)
    set(changed true)
    if(EXISTS ${path})
      file(READ ${path} prev_src)
      if("${src}" STREQUAL "${prev_src}")
        set(changed false)
      endif()
    endif()

    if(changed)
      file(WRITE ${path} "${src}")
    endif()
  endfunction()

  string(TOLOWER ${BB_PLATFORM} platform)

  stub("// AUTOGENERATED. DO NOT EDIT OR COMMIT.")
  stub("// RUN `make` TO UPDATE.")
  stub("")
  stub("#include <bb/stub/stub.h>")
  stub("#include <bb/runtime/runtime.h>")
  stub("#include \"../stdutil/stdutil.h\"")
  stub("")
  foreach(dep IN LISTS MOD_IDS)
    stub("BBMODULE_DECL( ${dep} );")
  endforeach()
  stub("")
  stub("BBRuntime *${entry}();")
  stub("bool bbruntime_create(){")
  stub("\tif( !(bbRuntime=${entry}()) ){")
  stub("\t\treturn false;")
  stub("\t}")
  foreach(dep IN LISTS MOD_IDS)
    stub("\tif( ${dep}_create() ){")
  endforeach()
  stub("\t\treturn true;")
  list(REVERSE MOD_IDS)
  foreach(dep IN LISTS MOD_IDS)
  stub("\t}else sue( \"${dep}_create failed\" );")
  stub("\t${dep}_destroy();")
  endforeach()
  stub("\treturn false;")
  stub("}")
  stub("")
  stub("bool bbruntime_destroy(){")
  foreach(dep IN LISTS MOD_IDS)
    stub("\t${dep}_destroy();")
  endforeach()
  stub("\tif( bbRuntime ) bbCloseRuntime( bbRuntime );")
  stub("\treturn true;")
  stub("}")
  stub("")

  set(RT_CPP ${CMAKE_CURRENT_LIST_DIR}/rt.${platform}.cpp)
  file_write_changes(${RT_CPP} "${STUB_SRC}")

  set(STUB_SRC )
  stub("// AUTOGENERATED. DO NOT EDIT OR COMMIT.")
  stub("// RUN `make` TO UPDATE.")
  stub("")
  stub("#include <bb/stub/stub.h>")
  stub("#include <bb/runtime/runtime.h>")
  stub("#include \"../stdutil/stdutil.h\"")
  stub("")
  foreach(dep IN LISTS MOD_IDS)
    stub("BBMODULE_LINK( ${dep} );")
  endforeach()
  stub("")
  stub("void bbruntime_link( BBRTLINK link ){")
  foreach(dep IN LISTS MODS_TO_LINK)
    stub("\t${dep}_link( link );")
  endforeach()
  stub("}")
  stub("")

  set(LINK_CPP ${CMAKE_CURRENT_LIST_DIR}/rt.${platform}.link.cpp)
  file_write_changes(${LINK_CPP} "${STUB_SRC}")

  # static
  add_library(${name}.static STATIC ${RT_CPP} ${SOURCES})
  target_output_to_toolchain(${name}.static)
  target_link_libraries(${name}.static PUBLIC ${LIBS} ${SYSTEM_LIBS} ${END_GROUP})
  target_include_directories(${name}.static PUBLIC ../../modules)

  set(RUNTIME_IFACE )
  list(APPEND RUNTIME_IFACE "[runtime.\"${id}\"]")
  list(APPEND RUNTIME_IFACE "name = \"${RT_NAME}\"")
  list(APPEND RUNTIME_IFACE "entry = \"${RT_ENTRY}\"")
  list(JOIN DEPENDS_ON "\", \"" depends_on)
  list(APPEND RUNTIME_IFACE "deps = [\"${depends_on}\"]")

  list(JOIN RUNTIME_IFACE "\n" RUNTIME_IFACE)
  set(RUNTIME_IFACE "${RUNTIME_IFACE}" PARENT_SCOPE)

  if(BB_COVERAGE)
    set_property(TARGET ${name}.static APPEND_STRING PROPERTY COMPILE_FLAGS " ${BB_COVERAGE}")
  endif()

  # shared
  set(SOURCES ${LINK_CPP})
  foreach(dep IN LISTS DEPENDS_ON)
    set(link_cpp ${PROJECT_SOURCE_DIR}/src/modules/bb/${dep}/module.link.cpp)

    if(EXISTS ${link_cpp})
      set(SOURCES ${SOURCES} ${link_cpp})
    endif()
  endforeach()

  add_library(${name}.shared SHARED ${SOURCES})
  target_link_libraries(${name}.shared ${START_GROUP} bbruntime_dll ${name}.static)
  set_target_properties(${name}.shared PROPERTIES OUTPUT_NAME "runtime.${id}")

  if(BB_WINDOWS)
    target_output_to_bin(${name}.shared)

    if(BB64)
      set_target_properties(${name}.shared PROPERTIES OUTPUT_NAME "runtime64.${id}")
    endif()

    if(BB_MSVC)
      target_link_options(${name}.shared PRIVATE /NOIMPLIB /NOEXP)

      if(BB_WIN32)
        set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " /include:_runtimeGetRuntime")
      else()
        set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " /include:runtimeGetRuntime")
      endif()
      if(NOT BB_DEBUG)
        set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " /subsystem:windows")
      endif()
    else()
      # TODO: figure this out...
      set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " -static")
    endif()
  else()
    target_output_to_toolchain(${name}.shared)
  endif()

  if(BB_COVERAGE)
    set_property(TARGET ${name}.shared APPEND_STRING PROPERTY COMPILE_FLAGS " ${BB_COVERAGE}")
    set_property(TARGET ${name}.shared APPEND_STRING PROPERTY LINK_FLAGS " ${BB_COVERAGE}")
  endif()
endmacro()

# bring in all the runtimes
file(GLOB runtimes RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *)
foreach(runtime ${runtimes})
  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${runtime}/CMakeLists.txt)
    set(RUNTIME_IFACE )
    add_subdirectory(${runtime})

    if(RUNTIME_IFACE)
      set(IFACE_CACHE "${IFACE_CACHE}\n${RUNTIME_IFACE}\n")
      set(RUNTIMES_IFACE ${IFACE_CACHE} PARENT_SCOPE)
    endif()
  ENDIF()
endforeach()
