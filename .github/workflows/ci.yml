name: CI
on: [push]

jobs:
  windows:
    name: Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-2019
          #- windows-2022
        arch:
          - win32
          - win64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - if: matrix.os == 'win64'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/blitz3d-ng/env/releases/download/v1/llvm-14.0.4-win64-msvc$env:VisualStudioVersion.zip" -OutFile "llvm.zip"
          Expand-Archive llvm.zip -DestinationPath .\
          Rename-Item llvm-14.0.4 llvm
      - run: .\make.bat release ${{ matrix.arch }}
      #- run: .\test\entry.${{ matrix.arch }}.bat
      - name: Archive build
        # if: matrix.os == 'windows-2022'
        uses: actions/upload-artifact@v2
        with:
          name: toolchain-${{ matrix.arch }}
          path: _release/bin

  # mingw:
  #   name: MinGW
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       arch:
  #         - mingw32
  #         # - mingw64
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - run: ./env.sh mingw make ENV=release PLATFORM=${{ matrix.arch }}
  #     - run: ./env.sh mingw sh ./test/entry.mingw32.sh
  #       continue-on-error: true

  macos:
    name: macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          # - macos-10.15
          - macos-11
          - macos-12
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: |
          mkdir _release/toolchains
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.4/clang+llvm-14.0.4-x86_64-apple-darwin.tar.xz
          tar xf clang+llvm-14.0.4-x86_64-apple-darwin.tar.xz
          mv clang+llvm-14.0.4-x86_64-apple-darwin llvm
      - run: brew install ninja gcovr
      - run: make ENV=release PLATFORM=macos LLVM_ROOT=$GITHUB_WORKSPACE/llvm
      - run: blitzpath=$GITHUB_WORKSPACE/_release ./test/suite.sh
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: toolchain-${{ matrix.os }}
          path: _release/bin

  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dist:
          - debian-10
          - debian-11
          - ubuntu-21.04
          - ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./env.sh ${{ matrix.dist }} make ENV=release PLATFORM=linux
      #- run: ./env.sh ${{ matrix.dist }} ./test/suite.sh

  ios:
    name: iOS
    runs-on: macos-latest
    strategy:
      matrix:
        device:
          - ios
          - ios-sim
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: brew install ninja gcovr
      - run: make ENV=release PLATFORM=${{ matrix.device }}
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: toolchain-${{ matrix.device }}
          path: _release/bin

  android:
    name: Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./env.sh android make ENV=release PLATFORM=android

  emscripten:
    name: Emscripten (Web)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # TODO: find out why the first time always fails...
      - run: ./env.sh emscripten make ENV=release PLATFORM=emscripten
        continue-on-error: true
      - run: ./env.sh emscripten make ENV=release PLATFORM=emscripten

  nx:
    name: Switch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./env.sh nx make ENV=release PLATFORM=nx

  help:
    name: Help
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: bin/blitz3d help --build
